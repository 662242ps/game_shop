// src/app/pages/users/cart/cart.ts
import { Component, OnInit, inject, signal, computed } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router } from '@angular/router';
import { HeaderComponent } from '../../header/header';
import { GameShopService } from '../../../services/api/game_shop.service';
import { CartGetResponse } from '../../../models/response/cart_get_response'; // ‚úÖ ‡πÅ‡∏Å‡πâ import ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å path

@Component({
  selector: 'app-cart',
  standalone: true,
  imports: [CommonModule, RouterModule, HeaderComponent],
  templateUrl: './cart.html',
  styleUrl: './cart.scss'
})
export class Cart implements OnInit {
  private api = inject(GameShopService);
  private router = inject(Router);

  userId!: number;

  // UI state
  loading = signal<boolean>(true);
  working = signal<boolean>(false);
  error   = signal<string | null>(null);

  // ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà: items ‡πÄ‡∏õ‡πá‡∏ô any[] ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà BE ‡∏™‡πà‡∏á‡∏°‡∏≤
  items  = signal<any[]>([]);
  total  = computed(() =>
    this.items().reduce((s, i) => s + this.getTotal(i), 0)
  );
  count  = computed(() =>
    this.items().reduce((s, i) => s + this.getQty(i), 0)
  );

  ngOnInit(): void {
    const me = this.api.getCurrentUser();
    if (!me?.id) { this.router.navigate(['/login']); return; }
    this.userId = Number(me.id);
    this.loadCart();
  }

  private loadCart() {
    this.loading.set(true);
    this.error.set(null);
    this.api.cartGet(this.userId).subscribe({
      next: (res: CartGetResponse) => {
        // res.items ‡πÄ‡∏õ‡πá‡∏ô any[] ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà
        this.items.set(Array.isArray(res?.items) ? res.items : []);
        this.loading.set(false);
      },
      error: err => { this.error.set(err?.message ?? '‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'); this.loading.set(false); }
    });
  }

  /** ---- Helpers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å item ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ---- */

  /** ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö field ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢ */
  imgUrlFromItem(it: any): string | null {
    const raw = it?.image ?? it?.img ?? it?.cover ?? it?.thumbnail ?? null;
    return raw ? (this.api.toAbsoluteUrl(raw) || null) : null;
  }

  /** ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ü‡∏¥‡∏•‡∏î‡πå */
  getName(it: any): string {
    return String(it?.game_name ?? it?.name ?? it?.title ?? '');
  }

  /** ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß */
  getPrice(it: any): number {
    return Number(it?.price ?? 0);
  }

  /** ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô */
  getQty(it: any): number {
    return Number(it?.quantity ?? it?.qty ?? 0);
  }

  /** ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */
  getTotal(it: any): number {
    const tot = it?.total_price ?? it?.total ?? null;
    return tot != null ? Number(tot) : (this.getPrice(it) * this.getQty(it));
  }

  /** game_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö call API ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å */
  getGameId(it: any): number {
    return Number(it?.game_id ?? it?.id ?? 0);
  }

  /** ---- Actions ---- */

  remove(it: any) {
    if (this.working()) return;
    const gid = this.getGameId(it);
    if (!gid) { this.error.set('‡πÑ‡∏°‡πà‡∏û‡∏ö game_id ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'); return; }

    this.working.set(true);
    this.api.cartRemove({ user_id: this.userId, game_id: gid }).subscribe({
      next: () => {
        this.items.update(list => list.filter(x => this.getGameId(x) !== gid));
        this.working.set(false);
      },
      error: err => { this.error.set(err?.message ?? '‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'); this.working.set(false); }
    });
  }

  purchaseAll() {
    if (this.working() || this.items().length === 0) return;
    this.working.set(true);
    this.error.set(null);
    this.api.cartPurchase(this.userId).subscribe({
      next: () => { this.items.set([]); this.working.set(false); alert('‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ'); },
      error: err => { this.error.set(err?.message ?? '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'); this.working.set(false); }
    });
  }

  /** ‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ template ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á path ‡∏ï‡∏£‡∏á ‡πÜ */
  imgUrl(p?: string | null): string | null {
    return this.api.toAbsoluteUrl(p || '') || null;
  }
}
